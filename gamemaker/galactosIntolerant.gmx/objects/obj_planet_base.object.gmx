<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Init all variables

// mechanics
self.step  = -1;
self.orbit = -1;
self.rate  = -1;
self.turn  =  0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message(object_get_name(id.object_index));
//show_debug_message("     " +string(self.turn));
if (global.turn == self.turn)
{
    show_debug_message(object_get_name(id.object_index)+" is moving "+string(self.turn)+" vs "+string(global.turn));

    self.turn += 1;
    self.step += self.rate
    var degrees = global.orbit_deg_arr[self.orbit] * self.step
    var radius = global.sun_radius + (self.orbit * global.orb_width)
    self.x = (room_width/2) + (radius * (sin(degtorad(degrees))))
    self.y = (room_height/2) + (radius * (cos(degtorad(degrees))))
}

/*
self.array = 0;
self.array[0] = 1;
show_debug_message("printing array stuff!: "+string(self.array[0]));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>

            <string>self.step += self.rate
var degrees = global.orbit_deg_arr[self.orbit] * self.step
var radius = global.sun_radius + (self.orbit * global.orb_width)
self.x = (room_width/2) + (radius * (sin(degtorad(degrees))))
self.y = (room_height/2) + (radius * (cos(degtorad(degrees))))

//show_debug_message(string(self.last_x)+" "+string(self.last_y));
//show_debug_message(string(mouse_x)+" " +string(mouse_y));

instance_create( x-sprite_width/2, y, obj_arrow_left );
instance_create( x+sprite_width/2, y, obj_arrow_right );
instance_create( x, y-sprite_height/2, obj_arrow_up );
instance_create( x, y+sprite_height/2, obj_arrow_down );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var degrees = global.orbit_deg_arr[self.orbit] * self.step
var radius = global.sun_radius + (self.orbit * global.orb_width)
self.x = (room_width/2) + (radius * (sin(degtorad(degrees))))
self.y = (room_height/2) + (radius * (cos(degtorad(degrees))))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
